//
//  WikiSearchViewController.swift
//  Monetap
//
//  Created by Garry Patel on 06/09/18.
//  Copyright (c) 2018 com.ways. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MBProgressHUD

protocol WikiSearchDisplayLogic: class
{
  func displaySomething(viewModel: WikiSearch.SearchWiki.ViewModel)
}

class WikiSearchViewController: UIViewController, WikiSearchDisplayLogic
{
    
  let dataSource = WikiSearchDataSource()
    var isMoreData : Bool?
    let pageLimit = 10
  
  var interactor: WikiSearchBusinessLogic?
  var router: (NSObjectProtocol & WikiSearchRoutingLogic & WikiSearchDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = WikiSearchInteractor()
    let presenter = WikiSearchPresenter()
    let router = WikiSearchRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
 
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    setUPSearchView()
  }
  
  // MARK: ~~~~~~~~~~~~~~~~~~~~~~~~~~ IBOUTLETS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    @IBOutlet weak var tableViewSearchResult: UITableView!
    @IBOutlet weak var searchBar: UISearchBar!
    
 // MARK: Do something
    
    // MARK: ~~~~~~~~~~~~~~~~~~~~~~~~~~ SETUP FAQ VIEW  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
   private func setUPSearchView()  {
        print("\(#function)")
        dataSource.selectDelegate = self
        self.tableViewSearchResult.delegate = dataSource
        self.tableViewSearchResult.dataSource = dataSource
        self.tableViewSearchResult.reloadData()
        
    }
    
    
  private func getSearch(_ pageLimit : Int) {
    print("\(#function)")
    
    MBProgressHUD.showAdded(to: self.view, animated: true)
    let request = WikiSearch.SearchWiki.Request(searchStr: self.searchBar.text!, limit: pageLimit)
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: WikiSearch.SearchWiki.ViewModel) {
    
    MBProgressHUD.hide(for: self.view, animated: true)
    
    if viewModel.isError! {
        let alert = UIAlertController(title: "", message: viewModel.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction.init(title: "OK", style: .default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    } else {
        // Display result ...
        if let pages = viewModel.query?.pages {
            dataSource.pagesData = pages
            
            if dataSource.pagesData.count > 0 {
                tableViewSearchResult.isHidden = false
            }
            
            tableViewSearchResult.reloadData()
        }
        
        isMoreData = viewModel.batchcomplete ?? false
    }
  }
}


// MARK: ~~~~~~~~~~~~~~~~~~~~~~~~~~ Extension's ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

extension WikiSearchViewController : UISearchBarDelegate {
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        print("\(#function)")
        self.view.endEditing(true)
        
        if self.searchBar.text!.replacingOccurrences(of: " ", with: "").count > 0 {
            self.getSearch(pageLimit)
        }
    }
   
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if searchText == "" {
            print("UISearchBar.text cleared!")
            isMoreData = nil
            dataSource.pagesData.removeAll()
            tableViewSearchResult.reloadData()
            tableViewSearchResult.isHidden = true
        }
    }
}

extension WikiSearchViewController : SearchSelected {
    
    func selectedRow(_ title: String?) {
        print("\(#function)")
        
        if let detailController = self.storyboard?.instantiateViewController(withIdentifier: "DetailViewController_id") as? SearchDetailViewController {
            detailController.titleStr = title ?? ""
            self.navigationController?.pushViewController(detailController, animated: true)
        }
    }
    
    func nextPaginationCall(_ counter: Int) {
        print("\(#function)")
        
        if let moreData = isMoreData , moreData {
            self.isMoreData = false
            self.getSearch(counter+pageLimit)
        }
    }
}
